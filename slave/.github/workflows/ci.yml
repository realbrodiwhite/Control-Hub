name: ControlHub Slave CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi cmake build-essential
    
    - name: Cache Build
      uses: actions/cache@v2
      with:
        path: |
          build/
          ~/.cache/
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.c', '**/*.h', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Configure CMake
      run: |
        mkdir -p build
        cd build
        cmake .. -DBUILD_TESTS=ON
    
    - name: Build
      run: |
        cd build
        make
    
    - name: Run Tests
      run: |
        cd build
        ./test_runner --type=unit
        ./test_runner --type=integration
    
    - name: Generate Coverage Report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        genhtml coverage.info --output-directory coverage
    
    - name: Upload Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: build/coverage

  static-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy
    
    - name: Run Cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=1 src/
    
    - name: Run Clang-Tidy
      run: |
        find src/ -name '*.c' -o -name '*.h' | xargs clang-tidy -p build/

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Generate Documentation
      run: |
        doxygen Doxyfile
    
    - name: Upload Documentation
      uses: actions/upload-artifact@v2
      with:
        name: documentation
        path: docs/html

  release:
    needs: [build-and-test, static-analysis, documentation]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Build Release
      run: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make
    
    - name: Create Release Package
      run: |
        mkdir -p release
        cp build/kernel.img release/
        cp -r config/ release/
        tar czf controlhub-slave.tar.gz release/
    
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v2
      with:
        name: release-package
        path: controlhub-slave.tar.gz

  deploy:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Release Package
      uses: actions/download-artifact@v4
      with:
        name: release-package
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: controlhub-slave.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
